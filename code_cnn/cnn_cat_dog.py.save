
# coding: utf-8

# In[2]:

from scipy import misc
import os


# In[3]:

path='/home/ubuntu/train/data/'


# In[4]:

#images=os.listdir(path)


# In[6]:

#imgs=[]
#for img in images:
#    img = misc.imread(path+img)
#    imgs.append(img)


# In[28]:

# cats=[]
# dogs=[]
#for i in range(0,1000):
 #   cat=misc.imread(path+'cat.'+str(i)+'.jpg')
  #  misc.imsave(path+'train/cats/cat.'+str(i)+'.jpg',cat)
   # dog=misc.imread(path+'dog.'+str(i)+'.jpg')
    #misc.imsave(path+'train/dogs/dog.'+str(i)+'.jpg',dog)


# In[31]:

#for i in range(1000,1400):
 #   cat=misc.imread(path+'cat.'+str(i)+'.jpg')
  #  misc.imsave(path+'test/cats/cat.'+str(i)+'.jpg',cat)
   # dog=misc.imread(path+'dog.'+str(i)+'.jpg')
    #misc.imsave(path+'test/dogs/dog.'+str(i)+'.jpg',dog)


# In[37]:

#img = misc.imread(path+'test/dogs/dog.1000.jpg')


# In[38]:

#import matplotlib.pyplot as plt
#plt.imshow(img)
#plt.show()


# In[39]:

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Convolution2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense


# In[40]:

arrs = np.append(arrs, [cat0], axis = 0)
arrs = np.append(arrs, [cat1], axis = 0)
arrs = np.append(arrs, [cat2], axis = 0)
arrs = np.append(arrs, [cat3], axis = 0)
arrs = np.append(arrs, [cat4], axis = 0)

arrs = np.append(arrs, [dog0], axis = 0)
arrs = np.append(arrs, [dog1], axis = 0)
arrs = np.append(arrs, [dog2], axis = 0)
arrs = np.append(arrs, [dog3], axis = 0)
arrs = np.append(arrs, [dog4], axis = 0)img_width, img_height = 150, 150

train_data_dir = '/home/ubuntu/train/data/train/'
validation_data_dir = '/home/ubuntu/train/data/test/'
nb_train_samples = 2000
nb_validation_samples = 800
nb_epoch = 200


# In[41]:

model = Sequential()
model.add(Convolution2D(32, 3, 3, input_shape=(3, img_width, img_height)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(32, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(64, 3, 3))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])


# In[42]:

# this is the augmentation configuration we will use for training
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)


# In[43]:

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(img_width, img_height),
        batch_size=32,
        class_mode='binary')

validation_generator = test_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(img_width, img_height),
        batch_size=32,
        class_mode='binary')

model.fit_generator(
        train_generator,
        samples_per_epoch=nb_train_samples,
        nb_epoch=nb_epoch,
        validation_data=validation_generator,
        nb_val_samples=nb_validation_samples)

model.save('first_200epoch.h5')
# In[ ]:



